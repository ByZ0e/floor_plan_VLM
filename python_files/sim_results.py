# -*- coding: utf-8 -*-
"""sim results

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gdlEU039w78VbDsNVgSQ8WO8gsYFel2L
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Read the CSV files
df_2point = pd.read_csv('VLM floor plan sim results - 2-point, GPT, ours.csv')
df_3point = pd.read_csv('VLM floor plan sim results - 3-point, GPT, ours.csv')

# Combine the dataframes
df_2point['Method'] = '2-point'
df_3point['Method'] = '3-point'
df_combined = pd.concat([df_2point, df_3point])

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Read and prepare the data (as before)
df_2point = pd.read_csv('VLM floor plan sim results - 2-point, GPT, ours.csv')
df_3point = pd.read_csv('VLM floor plan sim results - 3-point, GPT, ours.csv')

df_2point['Method'] = '2-point'
df_3point['Method'] = '3-point'
df_combined = pd.concat([df_2point, df_3point])

def extract_complexity(x):
    try:
        return x.split()[0].capitalize()
    except:
        return 'Unknown'

df_combined['Complexity'] = df_combined['Map'].apply(extract_complexity)
df_combined = df_combined[df_combined['Complexity'] != 'Unknown']



# 3. Heatmap: Success rate by complexity and method
success_rate = df_combined.groupby(['Complexity', 'Method'])['correct'].mean().unstack()
plt.figure(figsize=(10, 6))
sns.heatmap(success_rate, annot=True, cmap='YlGnBu', fmt='.2f')
plt.title('Success Rate Heatmap: Complexity vs. Method')
plt.savefig('heatmap_success_rate.png')
plt.show()
plt.close()

# 4. Line plot: Success rate trend across different maps
map_order = df_combined['Map'].unique()
success_by_map = df_combined.groupby(['Map', 'Method'])['correct'].mean().unstack()
plt.figure(figsize=(12, 6))
success_by_map.plot(marker='o')
plt.title('Success Rate Trend Across Different Maps')
plt.xlabel('Map')
plt.ylabel('Success Rate')
plt.xticks(range(len(map_order)), map_order, rotation=45, ha='right')
plt.legend(title='Method')
plt.tight_layout()
plt.savefig('line_success_rate_trend.png')
plt.show()
plt.close()



# 6. Stacked bar plot: Proportion of correct/incorrect plans by complexity and method
correct_props = df_combined.groupby(['Complexity', 'Method', 'correct']).size().unstack(fill_value=0)
correct_props = correct_props.div(correct_props.sum(axis=1), axis=0)
correct_props.plot(kind='bar', stacked=True, figsize=(10, 6))
plt.title('Proportion of Correct/Incorrect Plans by Complexity and Method')
plt.xlabel('Complexity and Method')
plt.ylabel('Proportion')
plt.legend(title='Correct', labels=['Incorrect', 'Correct'])
plt.tight_layout()
plt.savefig('stacked_bar_correct_proportion.png')
plt.show()
plt.close()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the data
df_3point = pd.read_csv('VLM floor plan sim results - 3-point, GPT, ours.csv')
df_2point = pd.read_csv('VLM floor plan sim results - 2-point, GPT, ours.csv')

# Function to create the line plot
def create_line_plot(df, title):
    plt.figure(figsize=(12, 8))
    df_sorted = df.sort_values(by='Plan length')
    sns.lineplot(data=df_sorted, x='Plan length', y='correct', marker='o', palette='viridis')
    plt.title(title, fontsize=16)
    plt.ylabel('Correct (1) / Incorrect (0)', fontsize=14)
    plt.xlabel('Plan Length', fontsize=14)
    plt.xticks(fontsize=12)
    plt.yticks(fontsize=12)
    plt.tight_layout()
    plt.show()

# 1. Plot for 3-point system
create_line_plot(df_3point, 'Plan Length vs Correctness (3-point System)')

# 2. Plot for 2-point system
create_line_plot(df_2point, 'Plan Length vs Correctness (2-point System)')

# 3. Combined plot
df_combined = pd.concat([df_3point.assign(System='3-point'),
                         df_2point.assign(System='2-point')],
                        ignore_index=True)

plt.figure(figsize=(12, 8))
df_sorted = df_combined.sort_values(by='Plan length')
sns.lineplot(data=df_sorted, x='Plan length', y='correct', hue='System', marker='o', palette='viridis')
plt.title('Plan Length vs Correctness (Combined)', fontsize=16)
plt.ylabel('Correct (1) / Incorrect (0)', fontsize=14)
plt.xlabel('Plan Length', fontsize=14)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.legend(title='System', fontsize=12, title_fontsize=12)
plt.tight_layout()
plt.show()

# Calculate average correctness for each map
def calculate_avg_correctness(df):
    return df.groupby('Map')['correct'].mean().reset_index()

avg_3point = calculate_avg_correctness(df_3point)
avg_2point = calculate_avg_correctness(df_2point)

# Combine the data
avg_3point['System'] = '3-point'
avg_2point['System'] = '2-point'
combined_avg = pd.concat([avg_3point, avg_2point])

# Create the plot
plt.figure(figsize=(15, 8))
sns.barplot(x='Map', y='correct', hue='System', data=combined_avg)

plt.title('Correctness vs Floor Maps: 2-point vs 3-point Systems', fontsize=16)
plt.xlabel('Floor Map', fontsize=14)
plt.ylabel('Average Correctness', fontsize=14)
plt.xticks(rotation=45, ha='right', fontsize=12)
plt.yticks(fontsize=12)
plt.legend(title='System', fontsize=12, title_fontsize=12)

# Adjust layout to prevent cutting off labels
plt.tight_layout()

# Show the plot
plt.show()

# Save the plot
plt.savefig('correctness_vs_floormaps.png')

# Calculate average correctness for each map
def calculate_avg_correctness(df):
    return df.groupby('Map')['correct'].mean().reset_index()

avg_3point = calculate_avg_correctness(df_3point)
avg_2point = calculate_avg_correctness(df_2point)

# Combine the data
avg_3point['System'] = '3-point'
avg_2point['System'] = '2-point'
combined_avg = pd.concat([avg_3point, avg_2point])

# Create the plot
plt.figure(figsize=(15, 8))
sns.lineplot(x='Map', y='correct', hue='System', data=combined_avg, marker='o', markersize=10)

plt.title('Correctness vs Floor Maps: 2-point vs 3-point Systems', fontsize=16)
plt.xlabel('Floor Map', fontsize=14)
plt.ylabel('Average Correctness', fontsize=14)
plt.xticks(rotation=45, ha='right', fontsize=12)
plt.yticks(fontsize=12)
plt.legend(title='System', fontsize=12, title_fontsize=12)

# Add value labels
for line in plt.gca().lines:
    for x, y in zip(line.get_xdata(), line.get_ydata()):
        plt.annotate(f'{y:.2f}', (x, y), textcoords="offset points", xytext=(0,10), ha='center', fontsize=9)

# Adjust layout to prevent cutting off labels
plt.tight_layout()

# Show the plot
plt.show()

# Save the plot
plt.savefig('correctness_vs_floormaps_lineplot.png')

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Read the CSV files
df_2point = pd.read_csv('VLM floor plan sim results - 2-point, GPT, ours.csv')
df_3point = pd.read_csv('VLM floor plan sim results - 3-point, GPT, ours.csv')

# Combine the dataframes
df_2point['Method'] = '2-point'
df_3point['Method'] = '3-point'
df_combined = pd.concat([df_2point, df_3point])

# Extract complexity from the 'Map' column
def extract_complexity(x):
    try:
        return x.split()[0].capitalize()
    except:
        return 'Unknown'

df_combined['Complexity'] = df_combined['Map'].apply(extract_complexity)

# Remove rows where Complexity is 'Unknown'
df_combined = df_combined[df_combined['Complexity'] != 'Unknown']

# High-level graphs
plt.figure(figsize=(12, 5))

# Average success rate by complexity
plt.subplot(1, 2, 1)
sns.barplot(x='Complexity', y='correct', hue='Method', data=df_combined)
plt.title('Average Success Rate by Floor Plan Complexity')
plt.ylabel('Success Rate')

# Average plan length by complexity
plt.subplot(1, 2, 2)
sns.barplot(x='Complexity', y='Plan length', hue='Method', data=df_combined)
plt.title('Average Plan Length by Floor Plan Complexity')
plt.ylabel('Plan Length')

plt.tight_layout()
plt.savefig('high_level_graphs.png')
plt.show()
plt.close()

# Low-level graphs
plt.figure(figsize=(15, 10))

# Success rate for each floor plan
plt.subplot(2, 1, 1)
sns.barplot(x='Map', y='correct', hue='Method', data=df_combined)
plt.title('Success Rate for Each Floor Plan')
plt.ylabel('Success Rate')
plt.xticks(rotation=45, ha='right')

# Average plan length for each floor plan
plt.subplot(2, 1, 2)
sns.barplot(x='Map', y='Plan length', hue='Method', data=df_combined)
plt.title('Average Plan Length for Each Floor Plan')
plt.ylabel('Plan Length')
plt.xticks(rotation=45, ha='right')

plt.tight_layout()
plt.savefig('low_level_graphs.png')
plt.show()
plt.close()

# Print unique values in 'Map' column to check for any unexpected entries
print(df_combined['Map'].unique())

PLAN NUMBERS DONT MATTER

# import pandas as pd
# import matplotlib.pyplot as plt

# # Load the CSV files
# file_path_3_point = 'VLM floor plan sim results - 3-point, GPT, ours.csv'
# file_path_2_point = 'VLM floor plan sim results - 2-point, GPT, ours.csv'

# data_3_point = pd.read_csv(file_path_3_point)
# data_2_point = pd.read_csv(file_path_2_point)

# # Rename columns to remove trailing spaces
# data_3_point.rename(columns=lambda x: x.strip(), inplace=True)
# data_2_point.rename(columns=lambda x: x.strip(), inplace=True)

# # Aggregate the data by 'plan' and sum the 'correct' counts
# agg_3_point = data_3_point.groupby('plan')['correct'].sum().reset_index()
# agg_2_point = data_2_point.groupby('plan')['correct'].sum().reset_index()

# # Create bar charts
# fig, ax = plt.subplots(1, 2, figsize=(14, 6))

# # 3-Point Plan
# ax[0].bar(agg_3_point['plan'], agg_3_point['correct'], color='b')
# ax[0].set_title('Number of Correct Trials for 3-Point Plan')
# ax[0].set_xlabel('Plan')
# ax[0].set_ylabel('Number of Correct Trials')
# ax[0].tick_params(axis='x', rotation=90)

# # 2-Point Plan
# ax[1].bar(agg_2_point['plan'], agg_2_point['correct'], color='g')
# ax[1].set_title('Number of Correct Trials for 2-Point Plan')
# ax[1].set_xlabel('Plan')
# ax[1].set_ylabel('Number of Correct Trials')
# ax[1].tick_params(axis='x', rotation=90)

# plt.tight_layout()
# plt.show()

# # Aggregate the data by 'plan' and sum the 'correct' counts for pie charts
# agg_3_point_pie = data_3_point.groupby('plan')['correct'].sum().reset_index()
# agg_2_point_pie = data_2_point.groupby('plan')['correct'].sum().reset_index()

# # Create pie charts
# fig, ax = plt.subplots(1, 2, figsize=(14, 6))

# # 3-Point Plan
# ax[0].pie(agg_3_point_pie['correct'], labels=agg_3_point_pie['plan'], autopct='%1.1f%%', startangle=140)
# ax[0].set_title('Distribution of Correct Trials for 3-Point Plan')

# # 2-Point Plan
# ax[1].pie(agg_2_point_pie['correct'], labels=agg_2_point_pie['plan'], autopct='%1.1f%%', startangle=140)
# ax[1].set_title('Distribution of Correct Trials for 2-Point Plan')

# plt.tight_layout()
# plt.show()

# # Aggregate the data by 'Plan length' and sum the 'correct' counts for line charts
# agg_3_point_len = data_3_point.groupby('Plan length')['correct'].sum().reset_index()
# agg_2_point_len = data_2_point.groupby('Plan length')['correct'].sum().reset_index()

# # Create line charts
# fig, ax = plt.subplots(1, 2, figsize=(14, 6))

# # 3-Point Plan
# ax[0].plot(agg_3_point_len['Plan length'], agg_3_point_len['correct'], marker='o', color='b')
# ax[0].set_title('Plan Length vs. Number of Correct Trials for 3-Point Plan')
# ax[0].set_xlabel('Plan Length')
# ax[0].set_ylabel('Number of Correct Trials')

# # 2-Point Plan
# ax[1].plot(agg_2_point_len['Plan length'], agg_2_point_len['correct'], marker='o', color='g')
# ax[1].set_title('Plan Length vs. Number of Correct Trials for 2-Point Plan')
# ax[1].set_xlabel('Plan Length')
# ax[1].set_ylabel('Number of Correct Trials')

# plt.tight_layout()
# plt.show()

# # Create box plots
# fig, ax = plt.subplots(1, 2, figsize=(14, 6))

# # 3-Point Plan
# ax[0].boxplot(data_3_point['Plan length'], vert=True, patch_artist=True)
# ax[0].set_title('Distribution of Plan Lengths for 3-Point Plan')
# ax[0].set_ylabel('Plan Length')

# # 2-Point Plan
# ax[1].boxplot(data_2_point['Plan length'], vert=True, patch_artist=True)
# ax[1].set_title('Distribution of Plan Lengths for 2-Point Plan')
# ax[1].set_ylabel('Plan Length')

# plt.tight_layout()
# plt.show()

